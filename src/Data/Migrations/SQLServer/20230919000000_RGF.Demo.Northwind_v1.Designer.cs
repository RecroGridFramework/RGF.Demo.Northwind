// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RGF.Demo.Northwind.Area.RGF.DbModel;

#nullable disable

namespace RGF.Demo.Northwind.Data.Migrations.SQLServer
{
    [DbContext(typeof(BaseDbContextMigrSQLServer))]
    [Migration("20230919000000_RGF.Demo.Northwind_v1")]
    partial class RGFNorthwind_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Recrovit.RecroGridFramework.Data.vRecroSec", b =>
                {
                    b.Property<int>("ObjectPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObjectPermissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectPermissionId"), 1L, 1);

                    b.Property<string>("ObjectKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ObjectKey");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ObjectName");

                    b.HasKey("ObjectPermissionId")
                        .HasName("PK_vRecroSec");

                    b.ToTable("vRecroSec", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Recrovit.RecroGridFramework.Data.vRecroSec_FEP", b =>
                {
                    b.Property<int>("FEPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FEPId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FEPId"), 1L, 1);

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityId");

                    b.Property<int>("FEPType")
                        .HasColumnType("int")
                        .HasColumnName("FEPType");

                    b.Property<string>("Key1")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Key1");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionId");

                    b.HasKey("FEPId")
                        .HasName("PK_vRecroSec_FEP");

                    b.ToTable("vRecroSec_FEP", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Categories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("CategoryName");

                    b.Property<string>("Description")
                        .HasColumnType("ntext")
                        .HasColumnName("Description");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Picture");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CategoryID")
                        .HasName("PK_Categories");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("CategoryName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.CustomerCustomerDemo", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("nchar(5)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerTypeID")
                        .HasColumnType("nchar(10)")
                        .HasColumnName("CustomerTypeID");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CustomerID", "CustomerTypeID")
                        .HasName("PK_CustomerCustomerDemo");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CustomerID", "CustomerTypeID"), false);

                    b.HasIndex("CustomerTypeID")
                        .HasDatabaseName("IX_CustomerCustomerDemo_CustomerTypeID");

                    b.ToTable("CustomerCustomerDemo");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.CustomerDemographics", b =>
                {
                    b.Property<string>("CustomerTypeID")
                        .HasColumnType("nchar(10)")
                        .HasColumnName("CustomerTypeID");

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("ntext")
                        .HasColumnName("CustomerDesc");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CustomerTypeID")
                        .HasName("PK_CustomerDemographics");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CustomerTypeID"), false);

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Customers", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("nchar(5)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("City");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ContactName");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ContactTitle");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Country");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("Fax");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("Phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Region");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CustomerID")
                        .HasName("PK_Customers");

                    b.HasIndex("City")
                        .HasDatabaseName("City");

                    b.HasIndex("CompanyName")
                        .HasDatabaseName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("PostalCode");

                    b.HasIndex("Region")
                        .HasDatabaseName("Region");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BirthDate");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Country");

                    b.Property<string>("Extension")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("Extension");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("FirstName");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HireDate");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("HomePhone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LastName");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext")
                        .HasColumnName("Notes");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Photo");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PhotoPath");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Region");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("int")
                        .HasColumnName("ReportsTo");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Title");

                    b.Property<string>("TitleOfCourtesy")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("TitleOfCourtesy");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("EmployeeID")
                        .HasName("PK_Employees");

                    b.HasIndex("LastName")
                        .HasDatabaseName("LastName");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("PostalCode");

                    b.HasIndex("ReportsTo")
                        .HasDatabaseName("IX_Employees_ReportsTo");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.EmployeeTerritories", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("TerritoryID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TerritoryID");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("EmployeeID", "TerritoryID")
                        .HasName("PK_EmployeeTerritories");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("EmployeeID", "TerritoryID"), false);

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("IX_EmployeeTerritories_TerritoryID");

                    b.ToTable("EmployeeTerritories");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Order_Details", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasColumnName("Discount")
                        .HasDefaultValueSql("(0)");

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Quantity")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("UnitPrice")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("OrderId", "ProductID")
                        .HasName("PK_Order Details");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("OrdersOrder_Details");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("ProductsOrder_Details");

                    b.ToTable("Order Details", (string)null);
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("CustomerID")
                        .HasColumnType("nchar(5)")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("Freight")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OrderDate");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RequiredDate");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("ShipAddress");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ShipCity");

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ShipCountry");

                    b.Property<string>("ShipName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ShipName");

                    b.Property<string>("ShipPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ShipPostalCode");

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ShipRegion");

                    b.Property<int?>("ShipVia")
                        .HasColumnType("int")
                        .HasColumnName("ShipVia");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ShippedDate");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("OrderID")
                        .HasName("PK_Orders");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("CustomersOrders");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("EmployeesOrders");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("OrderDate");

                    b.HasIndex("ShipPostalCode")
                        .HasDatabaseName("ShipPostalCode");

                    b.HasIndex("ShipVia")
                        .HasDatabaseName("ShippersOrders");

                    b.HasIndex("ShippedDate")
                        .HasDatabaseName("ShippedDate");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Products", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit")
                        .HasColumnName("Discontinued");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ProductName");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("QuantityPerUnit");

                    b.Property<short?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ReorderLevel")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("UnitPrice")
                        .HasDefaultValueSql("(0)");

                    b.Property<short?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("UnitsInStock")
                        .HasDefaultValueSql("(0)");

                    b.Property<short?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("UnitsOnOrder")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("ProductID")
                        .HasName("PK_Products");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("CategoryID");

                    b.HasIndex("ProductName")
                        .HasDatabaseName("ProductName");

                    b.HasIndex("SupplierID")
                        .HasDatabaseName("SuppliersProducts");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .HasColumnName("RegionDescription");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("RegionID")
                        .HasName("PK_Region");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Shippers", b =>
                {
                    b.Property<int>("ShipperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipperID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipperID"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("Phone");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("ShipperID")
                        .HasName("PK_Shippers");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Suppliers", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("City");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ContactName");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ContactTitle");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Country");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("Fax");

                    b.Property<string>("HomePage")
                        .HasColumnType("ntext")
                        .HasColumnName("HomePage");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("Phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Region");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("SupplierID")
                        .HasName("PK_Suppliers");

                    b.HasIndex("CompanyName")
                        .HasDatabaseName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("PostalCode");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Territories", b =>
                {
                    b.Property<string>("TerritoryID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TerritoryID");

                    b.Property<int>("RegionID")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .HasColumnName("TerritoryDescription");

                    b.Property<int>("rowversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowversion")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("TerritoryID")
                        .HasName("PK_Territories");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("TerritoryID"), false);

                    b.HasIndex("RegionID")
                        .HasDatabaseName("IX_Territories_RegionID");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.CustomerCustomerDemo", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Customers", "Customer")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerID")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerCustomerDemo_Customers");

                    b.HasOne("RGF.Demo.Northwind.Models.CustomerDemographics", "CustomerType")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerCustomerDemo");

                    b.Navigation("Customer");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Employees", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Employees", "Employees2")
                        .WithMany("Employees1")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("FK_Employees_Employees");

                    b.Navigation("Employees2");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.EmployeeTerritories", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Employees", "Employees")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeID")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeTerritories_Employees");

                    b.HasOne("RGF.Demo.Northwind.Models.Territories", "Territories")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TerritoryID")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeTerritories_Territories");

                    b.Navigation("Employees");

                    b.Navigation("Territories");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Order_Details", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Orders", "Orders")
                        .WithMany("Order_Details")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Details_Orders");

                    b.HasOne("RGF.Demo.Northwind.Models.Products", "Products")
                        .WithMany("Order_Details")
                        .HasForeignKey("ProductID")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Details_Products");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Orders", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("RGF.Demo.Northwind.Models.Employees", "Employees")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_Orders_Employees");

                    b.HasOne("RGF.Demo.Northwind.Models.Shippers", "Shippers")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia")
                        .HasConstraintName("FK_Orders_Shippers");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Shippers");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Products", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("RGF.Demo.Northwind.Models.Suppliers", "Suppliers")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .HasConstraintName("FK_Products_Suppliers");

                    b.Navigation("Categories");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Territories", b =>
                {
                    b.HasOne("RGF.Demo.Northwind.Models.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionID")
                        .IsRequired()
                        .HasConstraintName("FK_Territories_Region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.CustomerDemographics", b =>
                {
                    b.Navigation("CustomerCustomerDemo");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Customers", b =>
                {
                    b.Navigation("CustomerCustomerDemo");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Employees", b =>
                {
                    b.Navigation("EmployeeTerritories");

                    b.Navigation("Employees1");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Orders", b =>
                {
                    b.Navigation("Order_Details");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Products", b =>
                {
                    b.Navigation("Order_Details");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Region", b =>
                {
                    b.Navigation("Territories");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Shippers", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Suppliers", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RGF.Demo.Northwind.Models.Territories", b =>
                {
                    b.Navigation("EmployeeTerritories");
                });
#pragma warning restore 612, 618
        }
    }
}
