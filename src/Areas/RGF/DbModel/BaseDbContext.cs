// <auto-generated />
#define POSTGRESQL
#define ORACLE

using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Recrovit.RecroGridFramework;
using Recrovit.RecroGridFramework.Data;
using Recrovit.RecroGridFramework.Extensions;
using RGF.Demo.Northwind;

namespace RGF.Demo.Northwind.Area.RGF.DbModel;

public partial class BaseDbContext : NorthwindDbContext
{
    public BaseDbContext() { }

    public BaseDbContext(DbContextOptions options) : base(options) { }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);

        if (!optionsBuilder.IsConfigured)
        {
            var dbType = RGDataContext.ConnectionNameDBType;
            switch (dbType)
            {
                case DBTypeEnum.SQLServer:
                    optionsBuilder.UseSqlServer(RGDataContext.DefaultConnectionString, options =>
                    {
                        if (RGDataContext.SQLTimeout != -1)
                        {
                            options.CommandTimeout(RGDataContext.SQLTimeout);
                        }
                    });
                    break;
#if POSTGRESQL
                case DBTypeEnum.PostgreSQL:
                    optionsBuilder.UseNpgsql(RGDataContext.DefaultConnectionString, options =>
                    {
                        if (RGDataContext.SQLTimeout != -1)
                        {
                            options.CommandTimeout(RGDataContext.SQLTimeout);
                        }
                    });
                    break;
#endif
#if ORACLE
                case DBTypeEnum.Oracle:
                    optionsBuilder.UseOracle(RGDataContext.DefaultConnectionString, options =>
                    {
                        if (RGDataContext.SQLTimeout != -1)
                        {
                            options.CommandTimeout(RGDataContext.SQLTimeout);
                        }
                        options.UseOracleSQLCompatibility(OracleSQLCompatibility.DatabaseVersion21);
                    });
                    break;
#endif
                default:
                    throw new NotImplementedException();
            }
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.UseRGF(this, true);
    }
}

public static class WebApplicationBuilderExtensions
{
    public static void AddBaseDbContext(this WebApplicationBuilder builder)
    {
        IServiceCollection services = builder.Services;
        var dbType = RGDataContext.ConnectionNameDBType;
        switch (dbType)
        {
            case DBTypeEnum.SQLServer:
                //services.AddDbContext<BaseDbContext>(options => options.UseSqlServer(RGDataContext.DefaultConnectionString));
                services.AddDbContextPool<BaseDbContextPool>(options => options.UseSqlServer(RGDataContext.DefaultConnectionString));
                break;
#if POSTGRESQL
            case DBTypeEnum.PostgreSQL:
                //services.AddDbContext<BaseDbContext>(options => options.UseNpgsql(RGDataContext.DefaultConnectionString));
                services.AddDbContextPool<BaseDbContextPool>(options => options.UseNpgsql(RGDataContext.DefaultConnectionString));

                RecroGridConfig.OnConfiguringDbContext =
                    delegate (DbContextOptionsBuilder optionsBuilder, System.Data.Common.DbConnection connection, string connectionString)
                    {
                        if (connection != null)
                        {
                            optionsBuilder.UseNpgsql(connection, opts =>
                            {
                                if (RGDataContext.SQLTimeout != -1)
                                {
                                    opts.CommandTimeout(RGDataContext.SQLTimeout);
                                }
                            });
                        }
                        else
                        {
                            optionsBuilder.UseNpgsql(connectionString, opts =>
                            {
                                if (RGDataContext.SQLTimeout != -1)
                                {
                                    opts.CommandTimeout(RGDataContext.SQLTimeout);
                                }
                            });
                        }
                    };
                break;
#endif
#if ORACLE
            case DBTypeEnum.Oracle:
                //services.AddDbContext<BaseDbContext>(options => options.UseOracle(RGDataContext.DefaultConnectionString));
                services.AddDbContextPool<BaseDbContextPool>(options => options.UseOracle(RGDataContext.DefaultConnectionString,
                    o => o.UseOracleSQLCompatibility(OracleSQLCompatibility.DatabaseVersion21)));

                RecroGridConfig.OnConfiguringDbContext =
                    delegate (DbContextOptionsBuilder optionsBuilder, System.Data.Common.DbConnection connection, string connectionString)
                    {
                        if (connection != null)
                        {
                            optionsBuilder.UseOracle(connection, options =>
                            {
                                if (RGDataContext.SQLTimeout != -1)
                                {
                                    options.CommandTimeout(RGDataContext.SQLTimeout);
                                }
                                options.UseOracleSQLCompatibility(OracleSQLCompatibility.DatabaseVersion21);
                            });
                        }
                        else
                        {
                            optionsBuilder.UseOracle(connectionString, options =>
                            {
                                if (RGDataContext.SQLTimeout != -1)
                                {
                                    options.CommandTimeout(RGDataContext.SQLTimeout);
                                }
                                options.UseOracleSQLCompatibility(OracleSQLCompatibility.DatabaseVersion21);
                            });
                        }
                    };
                break;
#endif
            default:
                throw new NotImplementedException($"The BaseDbContext does not define the appropriate service for the database. The detected ConnectionStrings type is {dbType}.");
        }
    }

    public static async Task MigrateBaseDbContextAsync(this IApplicationBuilder app)
    {
        using (var serviceScope = app.ApplicationServices.CreateScope())
        {
            var dbType = Recrovit.RecroGridFramework.Data.RGDataContext.ConnectionNameDBType;
            BaseDbContext ctx = null;
            switch (dbType)
            {
                case DBTypeEnum.SQLServer:
                    ctx = new BaseDbContextMigrSQLServer();
                    break;

                case DBTypeEnum.PostgreSQL:
                    ctx = new BaseDbContextMigrPostgreSQL();
                    break;

                case DBTypeEnum.Oracle:
                    ctx = new BaseDbContextMigrOracle();
                    break;
            }
            if (ctx != null)
            {
                var migr = await ctx.Database.GetPendingMigrationsAsync();
                if (migr.Any())
                {
                    await ctx.Database.MigrateAsync();
                }
                else if (dbType != Recrovit.RecroGridFramework.Data.DBTypeEnum.Oracle)
                {
                    await serviceScope.ServiceProvider.GetService<BaseDbContextPool>().Database.EnsureCreatedAsync();
                }
                await ctx.DisposeAsync();
            }
        }
    }
}

public class BaseDbContextPool : BaseDbContext
{
    public BaseDbContextPool(DbContextOptions options) : base(options) { }
}

/*Install-Package Microsoft.EntityFrameworkCore.Tools*/

/*Install-Package Oracle.EntityFrameworkCore*/
/*Add-Migration RGF.Demo.Northwind_v1 -Context BaseDbContextMigrOracle -OutputDir Data\Migrations\Oracle*/
public class BaseDbContextMigrOracle : BaseDbContext { }

/*Install-Package Npgsql.EntityFrameworkCore.PostgreSQL*/
/*Add-Migration RGF.Demo.Northwind_v1 -Context BaseDbContextMigrPostgreSQL -OutputDir Data\Migrations\PostgreSQL*/
public class BaseDbContextMigrPostgreSQL : BaseDbContext { }

/*Install-Package Microsoft.EntityFrameworkCore.SqlServer*/
/*Add-Migration RGF.Demo.Northwind_v1 -Context BaseDbContextMigrSQLServer -OutputDir Data\Migrations\SQLServer*/
public class BaseDbContextMigrSQLServer : BaseDbContext { }
